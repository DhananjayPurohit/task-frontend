{"version":3,"sources":["apis/GitHubApi.js","fetchAPIs/GitHubApi.js","apis/MongoDBApi.js","fetchAPIs/CRUDOps.js","components/RepoList.js","components/BranchList.js","components/IssueList.js","components/Panel.js","pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["githubAPIs","repoFullName","fetchRepoData","repoFullname","a","fetch","response","json","fetchBranchesData","fetchIssuesData","mongodbAPIs","fetchRepoList","addInRepoList","repoDetails","sendData","full_name","method","body","JSON","stringify","headers","deleteFromRepoList","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","textAlign","RepoList","repoCallback","repoListCallback","React","open","setOpen","handleClose","selectedIndex","setSelectedIndex","selectedRepo","setSelectedRepo","org","setOrg","repo","setRepo","repos","setRepos","addRepo","repoData","newRepoData","description","fetchRepoListData","map","Box","sx","maxWidth","List","component","length","index","ListItemButton","selected","onClick","event","handleListItemClick","ListItemText","primary","secondary","Divider","Fab","color","bottom","Modal","onClose","Typography","id","variant","TextField","label","margin","onChange","e","target","value","fullWidth","Button","BranchList","props","repoBranches","setRepoBranches","fetchBranches","branchData","branch","name","IssueList","repoIssues","setRepoIssues","fetchIssues","issue","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","user","avatar_url","Date","created_at","toLocaleDateString","display","login","title","TabPanel","children","other","role","hidden","a11yProps","Panel","theme","useTheme","setValue","AppBar","Tabs","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","Home","useState","repoList","setRepoList","useCallback","Toolbar","align","flexGrow","Grid","container","height","item","xs","borderRight","i","splice","deleteRepoFromList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a2fb6f35.chunk.js","sourcesContent":["export const githubAPIs = {\r\n    getRepo: (repoFullName) => {\r\n        return `https://api.github.com/repos/${repoFullName}`;\r\n    },\r\n    getBranches: (repoFullName) => {\r\n        return `https://api.github.com/repos/${repoFullName}/branches`;\r\n    },\r\n    getIssues: (repoFullName) => {\r\n        return `https://api.github.com/repos/${repoFullName}/issues`;\r\n    },\r\n    getCommits: (repoFullName, branchName) => {\r\n        return `https://api.github.com/repos/${repoFullName}/commits?sha=${branchName}`;\r\n    },\r\n};","import { githubAPIs } from \"../apis/GitHubApi\";\r\n\r\nexport const fetchRepoData = async (repoFullname) => {\r\n    const response = await fetch(githubAPIs.getRepo(repoFullname));\r\n    return response.json();\r\n}\r\n\r\nexport const fetchBranchesData = async (repoFullname) => {\r\n    const response = await fetch(githubAPIs.getBranches(repoFullname));\r\n    return response.json();\r\n}\r\n\r\nexport const fetchIssuesData = async (repoFullname) => {\r\n    const response = await fetch(githubAPIs.getIssues(repoFullname));\r\n    return response.json();\r\n}\r\n\r\nexport const fetchCommitsData = async (repoFullname, branchName) => {\r\n    const response = await fetch(githubAPIs.getCommits(repoFullname, branchName));\r\n    return response.json();\r\n}","export const mongodbAPIs = {\r\n    getRepoList: () => {\r\n        return 'https://secret-everglades-26382.herokuapp.com/';\r\n    },\r\n    addRepo: () => {\r\n        return 'https://secret-everglades-26382.herokuapp.com/addRepo'\r\n    },\r\n    deleteRepo: () => {\r\n        return 'https://secret-everglades-26382.herokuapp.com/deleteRepo'\r\n    }\r\n};","import { mongodbAPIs } from \"../apis/MongoDBApi\";\r\n\r\nexport const fetchRepoList = async () => {\r\n    const response = await fetch(mongodbAPIs.getRepoList());\r\n    return response.json();\r\n}\r\n\r\nexport const addInRepoList = async (repoDetails) => {\r\n    const sendData = {\r\n        full_name : repoDetails.full_name\r\n    };\r\n    const response = await fetch(mongodbAPIs.addRepo(), {\r\n        method: 'POST',\r\n        body: JSON.stringify(sendData),\r\n        headers: {\r\n            'Content-type': 'application/json; charset=UTF-8'\r\n        }\r\n    });\r\n    return response.json();\r\n}\r\n\r\nexport const deleteFromRepoList = async (repoFullName) => {\r\n    const sendData = {\r\n        full_name : repoFullName\r\n    };\r\n    const response = await fetch(mongodbAPIs.deleteRepo(), {\r\n        method: 'DELETE',\r\n        body: JSON.stringify(sendData),\r\n        headers: {\r\n            'Content-type': 'application/json; charset=UTF-8'\r\n        }\r\n    });\r\n    return response.json();\r\n}","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Divider from '@mui/material/Divider';\r\nimport Fab from '@mui/material/Fab';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Typography from '@mui/material/Typography';\r\nimport Modal from '@mui/material/Modal';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { fetchRepoData } from '../fetchAPIs/GitHubApi';\r\nimport { addInRepoList } from '../fetchAPIs/CRUDOps';\r\nimport { fetchRepoList } from '../fetchAPIs/CRUDOps';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n    textAlign: \"center\"\r\n};\r\n\r\nexport default function RepoList({ repoCallback, repoListCallback }) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n    const [selectedRepo, setSelectedRepo] = React.useState('');\r\n\r\n    const handleListItemClick = (event, index, repo) => {\r\n        setSelectedIndex(index);\r\n        setSelectedRepo(repo.full_name);\r\n    };\r\n\r\n    const [org, setOrg] = React.useState('');\r\n    const [repo, setRepo] = React.useState('');\r\n\r\n    const [repos, setRepos] = React.useState([]);\r\n\r\n    // {\r\n    //     full_name: \"litmuschaos/litmus-e2e\",\r\n    //     description: \"Test the Chaos!!! An e2e (end-to-end) validation pipeline for the LitmusChaos infrastructure\"\r\n    // },\r\n    // {\r\n    //     full_name: \"litmuschaos/litmus\",\r\n    //     description: \"Litmus helps  SREs and developers practice chaos engineering in a Cloud-native way. Chaos experiments are published at the ChaosHub  (https://hub.litmuschaos.io). Community notes is at https://hackmd.io/a4Zu_sH4TZGeih-xCimi3Q\"\r\n    // }\r\n\r\n    const addRepo = async (org, repo) => {\r\n        const repoFullname = org + \"/\" + repo;\r\n        const repoData = await fetchRepoData(repoFullname);\r\n        const newRepoData = {\r\n            full_name: repoFullname,\r\n            description: repoData.description\r\n        };\r\n        setRepos([...repos, newRepoData]);\r\n        handleClose();\r\n        setOrg('');\r\n        setRepo('');\r\n        addInRepoList(newRepoData);\r\n    };\r\n\r\n    const fetchRepoListData = async () => {\r\n        const repoListData = await fetchRepoList();\r\n        repoListData.map(async (repo) => {\r\n            const repoData = await fetchRepoData(repo.full_name);\r\n            const newRepoData = {\r\n                full_name: repo.full_name,\r\n                description: repoData.description\r\n            }\r\n            setRepos([...repos, newRepoData]);\r\n        });\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        fetchRepoListData();\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        repoCallback(selectedRepo);\r\n        repoListCallback(repos);\r\n    }, [selectedRepo, repos]);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', maxWidth: \"100vw\", bgcolor: 'background.paper' }}>\r\n            <List component=\"nav\" aria-label=\"secondary mailbox folder\">\r\n                {\r\n                    repos.length !== 0 ?\r\n                        (repos.map((repo, index) => {\r\n                            return (\r\n                                <>\r\n                                    <ListItemButton\r\n                                        selected={selectedIndex === index}\r\n                                        onClick={(event) => handleListItemClick(event, index, repo)}\r\n                                        key={index}\r\n                                    >\r\n                                        <ListItemText\r\n                                            primary={repo.full_name}\r\n                                            secondary={repo.description}\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <Divider />\r\n                                </>\r\n                            )\r\n                        })\r\n                        )\r\n                        :\r\n                        (<>\r\n                            <ListItemButton>\r\n                                <ListItemText\r\n                                    primary=\"No repo added, add repo through + icon\"\r\n                                />\r\n                            </ListItemButton>\r\n                            <Divider />\r\n                        </>\r\n                        )\r\n                }\r\n            </List>\r\n            <Fab color=\"primary\"\r\n                aria-label=\"add\"\r\n                sx={{ position: \"fixed\", bottom: \"30px\", left: \"20px\" }}\r\n                onClick={handleOpen}\r\n            >\r\n                <AddIcon />\r\n            </Fab>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                        ADD NEW REPOSITORY\r\n                    </Typography>\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"Owner / Organization\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        onChange={(e) => setOrg(e.target.value)}\r\n                        value={org}\r\n                        fullWidth\r\n                    />\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"Repository Name\"\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        onChange={(e) => setRepo(e.target.value)}\r\n                        value={repo}\r\n                        fullWidth\r\n                    />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ margin: \"20px\" }}\r\n                        onClick={() => addRepo(org, repo)}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </Box>\r\n            </Modal>\r\n        </Box>\r\n    );\r\n}\r\n\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Divider from '@mui/material/Divider';\r\nimport { fetchBranchesData } from '../fetchAPIs/GitHubApi';\r\n\r\nexport default function BranchList(props) {\r\n\r\n    const [repoBranches, setRepoBranches] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        if (props.selectedRepo !== \"\") {\r\n            fetchBranches(props.selectedRepo);\r\n        }\r\n    }, [props.selectedRepo]);\r\n\r\n    const fetchBranches = async (selectedRepo) => {\r\n        const branchData = await fetchBranchesData(selectedRepo);\r\n        setRepoBranches(branchData);\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', maxWidth: \"100vw\", bgcolor: 'background.paper' }}>\r\n            <List component=\"nav\" aria-label=\"secondary mailbox folder\">\r\n                {\r\n                    repoBranches.length !== 0 ?\r\n                        (\r\n                            repoBranches.map((branch, index) => {\r\n                            return     <>\r\n                                    <ListItemButton>\r\n                                        <ListItemText primary={branch.name} />\r\n                                    </ListItemButton>\r\n                                    <Divider />\r\n                                </>\r\n                            })\r\n                        )\r\n                        :\r\n                        (\r\n                            <ListItemButton>\r\n                                <ListItemText primary=\"No branches available\" />\r\n                            </ListItemButton>\r\n                        )\r\n                }\r\n            </List>\r\n        </Box>\r\n    );\r\n}","import * as React from 'react';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport { fetchIssuesData } from '../fetchAPIs/GitHubApi';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\n\r\nexport default function IssueList(props) {\r\n\r\n    const [repoIssues, setRepoIssues] = React.useState([]);\r\n\r\n    React.useEffect(() => {\r\n        if (props.selectedRepo !== \"\") {\r\n            fetchIssues(props.selectedRepo);\r\n        }\r\n    }, [props.selectedRepo]);\r\n\r\n    const fetchIssues = async (selectedRepo) => {\r\n        const branchData = await fetchIssuesData(selectedRepo);\r\n        setRepoIssues(branchData);\r\n    }\r\n    return (\r\n        <List sx={{ width: '100%', maxWidth: \"100vw\", bgcolor: 'background.paper' }}>\r\n            {repoIssues.length !== 0 ?\r\n                (\r\n                    repoIssues.map((issue, index) => {\r\n                    return    <>\r\n                            <ListItem alignItems=\"flex-start\">\r\n                                <ListItemAvatar>\r\n                                    <Avatar alt=\"user image\" src={issue.user.avatar_url} />\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary={new Date(issue.created_at).toLocaleDateString()}\r\n                                    secondary={\r\n                                        <React.Fragment>\r\n                                            <Typography\r\n                                                sx={{ display: 'inline' }}\r\n                                                component=\"span\"\r\n                                                variant=\"body2\"\r\n                                                color=\"text.primary\"\r\n                                            >\r\n                                                {issue.user.login}\r\n                                            </Typography>\r\n                                            {` — ${issue.title}`}\r\n                                        </React.Fragment>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n                            <Divider variant=\"inset\" component=\"li\" />\r\n                        </>\r\n                    })\r\n                )\r\n                :\r\n                (\r\n                    <ListItemButton>\r\n                        <ListItemText primary=\"No issues available\" />\r\n                    </ListItemButton>\r\n                )\r\n            }\r\n        </List>\r\n    );\r\n}","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport BranchList from './BranchList';\r\nimport IssueList from './IssueList';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    'aria-controls': `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function Panel(props) {\r\n  const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ bgcolor: 'background.paper', width: \"100%\" }}>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"inherit\"\r\n          aria-label=\"full width tabs example\"\r\n        >\r\n          <Tab label=\"Branches\" {...a11yProps(0)} />\r\n          <Tab label=\"Issues\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <SwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabPanel value={value} index={0} dir={theme.direction}>\r\n          <BranchList selectedRepo={props.selectedRepo}/>\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} dir={theme.direction}>\r\n          <IssueList selectedRepo={props.selectedRepo}/>\r\n        </TabPanel>\r\n      </SwipeableViews>\r\n    </Box>\r\n  );\r\n}","import React from \"react\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport RepoList from '.././components/RepoList';\r\nimport Panel from '.././components/Panel';\r\nimport Button from '@mui/material/Button';\r\nimport { deleteFromRepoList } from \"../fetchAPIs/CRUDOps\";\r\n\r\nfunction Home() {\r\n\r\n    const [selectedRepo, setSelectedRepo] = React.useState('');\r\n    const [repoList, setRepoList] = React.useState([]);\r\n\r\n    const repoCallback = React.useCallback((selectedRepo) => {\r\n        setSelectedRepo(selectedRepo);\r\n    }, []);\r\n\r\n    const repoListCallback = React.useCallback((repoList) => {\r\n        setRepoList(repoList);\r\n    }, []);\r\n\r\n    const deleteRepoFromList = () => {\r\n        for (let i=0;i<repoList.length;i++){\r\n            if (repoList[i].full_name === selectedRepo){\r\n                setRepoList(repoList.splice(i,1));\r\n            }\r\n        }\r\n        deleteFromRepoList(selectedRepo);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" component=\"div\" align=\"center\" sx={{ flexGrow: 1 }}>\r\n                        GITHUB BROWSER\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container sx={{ height : \"100vh\" }}>\r\n                <Grid item xs={4} borderRight={1}>\r\n                    <RepoList \r\n                        repoCallback={repoCallback} \r\n                        repoListCallback={repoListCallback}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Button \r\n                              variant=\"contained\"\r\n                              sx={{ margin : \"20px\", left : \"85%\" }}\r\n                              onClick={() => deleteRepoFromList()}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Panel selectedRepo={selectedRepo}/>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from \"react\";\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#000000\",\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n    <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}